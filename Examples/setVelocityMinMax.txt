/*
  iSYS4001 Radar Sensor (Set Velocity Min Max)

  ---------------------------------------------------
  This sketch runs on ESP32 and communicates with the InnoSenT iSYS4001 radar module
  over UART2 (default pins: RX=16, TX=17).

  Features:
    - Configures minimum and maximum velocity thresholds (in km/h) for Output 1.
    - Saves application settings to the radar.
    - Continuously requests the target list and prints detected targets
      (signal, velocity [m/s], range [m], angle [deg]) to Serial Monitor.

  Notes:
    - The iSYS4001 expects velocity values in km/h when using
      iSYS_setOutputVelocityMin() and iSYS_setOutputVelocityMax().
    - The target list velocity values are returned in meters per second (m/s).
*/

#include "iSYS4001.h"

// Use Serial2 (ESP32 default pins: RX=16, TX=17). Adjust if needed for your board.
iSYS4001 radar(Serial2, 115200);

// Storage for decoded targets
iSYSTargetList_t targetList;

// Configuration
const uint8_t DESTINATION_ADDRESS = 0x80;  // Radar device address
const uint32_t TIMEOUT_MS = 300;           // Response timeout
uint8_t SetminVelocityValue = 18;          // Minimum velocity threshold (km/h)
uint8_t SetmaxVelocityValue = 217;         // Maximum velocity threshold (km/h)

void setup() {
  Serial.begin(115200);
  while (!Serial) { delay(10); }

  // Initialize Serial2 explicitly with pins on ESP32
  Serial2.begin(115200, SERIAL_8N1, 16, 17);

  // Print configuration
  Serial.print("Dest Addr: 0x"); Serial.println(DESTINATION_ADDRESS, HEX);
  Serial.print("Timeout: "); Serial.print(TIMEOUT_MS); Serial.println(" ms");
  Serial.println("Output: 1 (default)");

  // Flush any stale bytes from radar UART
  while (Serial2.available()) { Serial2.read(); }
  delay(500);

  // --- Set minimum velocity (km/h) ---
  iSYSResult_t iSYS_setOutputVelocityMin = radar.iSYS_setOutputVelocityMin(
    ISYS_OUTPUT_1, SetminVelocityValue, DESTINATION_ADDRESS, TIMEOUT_MS
  );
  if (iSYS_setOutputVelocityMin != ERR_OK) {
    Serial.print("iSYS_setOutputVelocityMin failed: ");
    Serial.println(iSYS_setOutputVelocityMin, HEX);
  } else {
    Serial.print("Minimum velocity set to: ");
    Serial.print(SetminVelocityValue);
    Serial.println(" km/h");
  }

  // --- Set maximum velocity (km/h) ---
  iSYSResult_t iSYS_setOutputVelocityMax = radar.iSYS_setOutputVelocityMax(
    ISYS_OUTPUT_1, SetmaxVelocityValue, DESTINATION_ADDRESS, TIMEOUT_MS
  );
  if (iSYS_setOutputVelocityMax != ERR_OK) {
    Serial.print("iSYS_setOutputVelocityMax failed: ");
    Serial.println(iSYS_setOutputVelocityMax, HEX);
  } else {
    Serial.print("Maximum velocity set to: ");
    Serial.print(SetmaxVelocityValue);
    Serial.println(" km/h");
  }

  // --- Save application settings ---
  iSYSResult_t saveApplicationSettings = radar.saveApplicationSettings(
    DESTINATION_ADDRESS, TIMEOUT_MS
  );
  if (saveApplicationSettings != ERR_OK) {
    Serial.print("Failed to save application settings. Error: ");
    Serial.println(saveApplicationSettings, HEX);
  } else {
    Serial.println("Application settings saved successfully.");
  }
}

void loop() {
  Serial.println("\n--- Requesting Target List ---");

  // Flush UART buffer
  while (Serial2.available()) { Serial2.read(); }

  // Request target list
  iSYSResult_t res = radar.getTargetList32(
    &targetList,
    DESTINATION_ADDRESS,
    TIMEOUT_MS
  );

  // Retry once if first attempt fails
  if (res != ERR_OK) {
    Serial.print("First attempt failed (code "); Serial.print(res); Serial.println(") - retrying once...");
    res = radar.getTargetList32(&targetList, DESTINATION_ADDRESS, TIMEOUT_MS);
  }

  // Handle result
  if (res == ERR_OK) {
    if (targetList.error.iSYSTargetListError == TARGET_LIST_OK) {
      Serial.print("Targets: ");
      Serial.print(targetList.nrOfTargets);
      Serial.print(", Output: ");
      Serial.println(targetList.outputNumber);

      for (uint16_t i = 0; i < targetList.nrOfTargets && i < MAX_TARGETS; i++) {
        Serial.print("#"); Serial.print(i + 1); Serial.println("");
        Serial.print("  Signal: "); Serial.println(targetList.targets[i].signal);
        Serial.print("  Velocity: "); Serial.print(targetList.targets[i].velocity); Serial.println(" m/s");
        Serial.print("  Range: "); Serial.print(targetList.targets[i].range); Serial.println(" m");
        Serial.print("  Angle: "); Serial.print(targetList.targets[i].angle); Serial.println(" deg");
      }
    } else {
      Serial.print("Target list error code: ");
      Serial.println(targetList.error.iSYSTargetListError);
    }
  } else {
    Serial.print("Failed to get target list - error code: ");
    Serial.println(res);
  }

  delay(300);
}

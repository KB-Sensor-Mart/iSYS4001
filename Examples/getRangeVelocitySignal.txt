#include "iSYS4001.h"

// Use Serial2 (ESP32 default pins: RX=16, TX=17). Adjust if needed for your board.
iSYS4001 radar(Serial2, 115200);

// Storage for decoded targets
iSYSTargetList_t targetList;
iSYSDirection_type_t Setvelocity_direction;

// Configuration
const uint8_t DESTINATION_ADDRESS = 0x80;  // Adjust per your device config
const uint32_t TIMEOUT_MS = 300;          // Response timeout



void setup() 
{
  Serial.begin(115200);
  while (!Serial) { delay(10); }

  // Initialize Serial2 explicitly with pins on ESP32
  Serial2.begin(115200, SERIAL_8N1, 16, 17);

  // Print configuration
  Serial.print("Dest Addr: 0x"); Serial.println(DESTINATION_ADDRESS, HEX);
  Serial.print("Timeout: "); Serial.print(TIMEOUT_MS); Serial.println(" ms");
  Serial.println("Output: 1 (default)");

  // Flush any stale bytes from radar UART
  while (Serial2.available()) 
  { 
    Serial2.read(); 
  }

  delay(500);

///////////////////////////////////////////////////// GET MINIMUM RANGE FUNCTION ///////////////////////////
    float rangeMin;
    iSYSResult_t iSYS_getOutputRangeMin = radar.iSYS_getOutputRangeMin(ISYS_OUTPUT_1, &rangeMin, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputRangeMin == ERR_OK) {
    Serial.print("Current Output Range Minimum: ");
    Serial.print(rangeMin);
    Serial.println(" m");
  } else {
    Serial.print("iSYS_getOutputRangeMin failed: ");
    Serial.println(iSYS_getOutputRangeMin, HEX);
  }


  
/////////////////////////////////////////////////////// GET MAXIMUM RANGE FUNCTION ///////////////////////////

   float rangeMax;
  iSYSResult_t iSYS_getOutputRangeMax = radar.iSYS_getOutputRangeMax(ISYS_OUTPUT_1, &rangeMax, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputRangeMax == ERR_OK) {
    Serial.print("Current Output Range Maximum: ");
    Serial.print(rangeMax);
    Serial.println(" m");
  } else {
    Serial.print("iSYS_getOutputRangeMax failed: ");
    Serial.println(iSYS_getOutputRangeMax, HEX);
  }

///////////////////////////////////////////////////// GET MINIMUM VELOCITY FUNCTION ///////////////////////////
    float velocityMin;
    iSYSResult_t iSYS_getOutputVelocityMin = radar.iSYS_getOutputVelocityMin(ISYS_OUTPUT_1, &velocityMin, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputVelocityMin == ERR_OK) {
    Serial.print("Current Output Velocity Minimum: ");
    Serial.print(velocityMin);
    Serial.println(" Km/h");
  } else {
    Serial.print("iSYS_getOutputVelocityMin failed: ");
    Serial.println(iSYS_getOutputVelocityMin, HEX);
  }


  
/////////////////////////////////////////////////////// GET MAXIMUM VELOCITY FUNCTION ///////////////////////////

   float velocityMax;
  iSYSResult_t iSYS_getOutputVelocityMax = radar.iSYS_getOutputVelocityMax(ISYS_OUTPUT_1, &velocityMax, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputVelocityMax == ERR_OK) {
    Serial.print("Current Output  Velocity Maximum: ");
    Serial.print(velocityMax);
    Serial.println(" Km/h");
  } else {
    Serial.print("iSYS_getOutputVelocityMax failed: ");
    Serial.println(iSYS_getOutputVelocityMax, HEX);
  }

///////////////////////////////////////////////////// GET MINIMUM SIGNAL FUNCTION ///////////////////////////
    float signalMin;
    iSYSResult_t iSYS_getOutputSignalMin = radar.iSYS_getOutputSignalMin(ISYS_OUTPUT_1, &signalMin, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputSignalMin == ERR_OK) {
    Serial.print("Current Output Signal Minimum: ");
    Serial.print(signalMin);
    Serial.println(" dB");
  } else {
    Serial.print("iSYS_getOutputSignalMin failed: ");
    Serial.println(iSYS_getOutputSignalMin, HEX);
  }


  
/////////////////////////////////////////////////////// GET MAXIMUM SIGNAL FUNCTION ///////////////////////////

   float signalMax;
  iSYSResult_t iSYS_getOutputSignalMax = radar.iSYS_getOutputSignalMax(ISYS_OUTPUT_1, &signalMax, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (iSYS_getOutputSignalMax == ERR_OK) {
    Serial.print("Current Output  Signal Maximum: ");
    Serial.print(signalMax);
    Serial.println(" dB");
  } else {
    Serial.print("iSYS_getOutputSignalMax failed: ");
    Serial.println(iSYS_getOutputSignalMax, HEX);
  }

}



void loop() {
  Serial.println("\n--- Requesting Target List ---");


  while (Serial2.available()) { Serial2.read(); }


  iSYSResult_t res = radar.getTargetList32(
    &targetList,
    DESTINATION_ADDRESS,
    TIMEOUT_MS
  );

  if (res != ERR_OK) {
    Serial.print("First attempt failed (code "); Serial.print(res); Serial.println(") - retrying once...");
    res = radar.getTargetList32(&targetList, DESTINATION_ADDRESS, TIMEOUT_MS);
  }

  if (res == ERR_OK) {
    if (targetList.error.iSYSTargetListError == TARGET_LIST_OK) {
      Serial.print("Targets: ");
      Serial.print(targetList.nrOfTargets);
      Serial.print(", Output: ");
      Serial.println(targetList.outputNumber);

      for (uint16_t i = 0; i < targetList.nrOfTargets && i < MAX_TARGETS; i++) {
        Serial.print("#"); Serial.print(i + 1); Serial.println("");
        Serial.print("  Signal: "); Serial.println(targetList.targets[i].signal);
        Serial.print("  Velocity: "); Serial.print(targetList.targets[i].velocity); Serial.println(" m/s");
        Serial.print("  Range: "); Serial.print(targetList.targets[i].range); Serial.println(" m");
        Serial.print("  Angle: "); Serial.print(targetList.targets[i].angle); Serial.println(" deg");
      }
    } else {
      Serial.print("Target list error code: ");
      Serial.println(targetList.error.iSYSTargetListError);
    }
  } else {
    Serial.print("Failed to get target list - error code: ");
    Serial.println(res);
  }



  delay(300);
}

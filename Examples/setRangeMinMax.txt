/*
  iSYS4001 Radar Sensor — Set Range Min/Max and Read Targets (16/32-bit)
  ---------------------------------------------------------------------
  This example shows how to:
  - Configure detection range limits (minimum/maximum) for an output
  - Persist settings (application + all settings)
  - Enable the Multiple Target Filter
  - Start acquisition
  - Read back targets using both 16-bit and 32-bit list formats

  Wiring (ESP32): RX=16 ←→ Radar TX, TX=17 ←→ Radar RX, GND shared.

  Tips:
  - Adjust DESTINATION_ADDRESS if your device uses a different address.
  - Call iSYS_startAcquisition() before requesting targets, otherwise you may not see data.
  - After changing configuration (range, filters, etc.), call saveAllSettings() to persist across reboots.
*/

#include "iSYS4001.h"

// Radar object and configuration
iSYS4001 radar(Serial2, 115200);
constexpr uint8_t DESTINATION_ADDRESS = 0x80;
constexpr uint32_t TIMEOUT_MS = 300; // ms
constexpr uint16_t MIN_RANGE_M = 3;   // meters
constexpr uint16_t MAX_RANGE_M = 10; // meters

// Pretty-printer for the global target list buffer
static iSYSTargetList_t gTargetList;
void printTargetList(const char* label) {
  Serial.println(label);
  if (gTargetList.error.iSYSTargetListError != TARGET_LIST_OK) {
    Serial.print("  Error: ");
    Serial.println(gTargetList.error.iSYSTargetListError);
    return;
  }
  Serial.printf("  Targets: %u (Output %u)\n", gTargetList.nrOfTargets, gTargetList.outputNumber);
  for (uint16_t i = 0; i < gTargetList.nrOfTargets && i < MAX_TARGETS; i++) {
    Serial.printf("  #%u Signal=%.1f dB, Velocity=%.2f m/s, Range=%.2f m, Angle=%.1fDeg\n",
                  i + 1,
                  gTargetList.targets[i].signal,
                  gTargetList.targets[i].velocity,
                  gTargetList.targets[i].range,
                  gTargetList.targets[i].angle);
  }
}

void setup() {
  Serial.begin(115200);
  while (!Serial) { delay(10); }
  
  Serial.println("=== iSYS4001 Radar Sensor Setup ===");
  Serial.printf("Range: %d - %d meters\n", MIN_RANGE_M, MAX_RANGE_M);
  Serial.printf("Destination Address: 0x%02X\n", DESTINATION_ADDRESS);
  Serial.printf("Timeout: %d ms\n", TIMEOUT_MS);

  // Enable library debug output to USB Serial
  radar.setDebug(Serial, true);
  Serial.println("Debug output enabled");

  // Initialize Serial2 explicitly with pins on ESP32
  Serial2.begin(115200, SERIAL_8N1, 16, 17);
  Serial.println("Serial2 initialized (RX=16, TX=17)");

  // Flush stale bytes
  while (Serial2.available()) { Serial2.read(); }
  delay(500);
  Serial.println("Serial2 flushed");

  // Set minimum range
  Serial.printf("Setting minimum range to %d meters...\n", MIN_RANGE_M);
  iSYSResult_t r = radar.iSYS_setOutputRangeMin(ISYS_OUTPUT_1, MIN_RANGE_M, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Minimum range set successfully");
  } else {
    Serial.printf("setOutputRangeMin failed: 0x%02X\n", r);
  }

  // Set maximum range
  Serial.printf("Setting maximum range to %d meters...\n", MAX_RANGE_M);
  r = radar.iSYS_setOutputRangeMax(ISYS_OUTPUT_1, MAX_RANGE_M, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Maximum range set successfully");
  } else {
    Serial.printf("setOutputRangeMax failed: 0x%02X\n", r);
  }

  // Save application settings
  Serial.println("Saving application settings...");
  r = radar.saveApplicationSettings(DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Application settings saved");
  } else {
    Serial.printf("saveApplicationSettings failed: 0x%02X\n", r);
  }

  // Enable Multiple Target Filter on Output 1 (so multiple targets can be reported)
  {
    iSYSResult_t res = radar.iSYS_setMultipleTargetFilter(ISYS_OUTPUT_1, DESTINATION_ADDRESS, TIMEOUT_MS);
    if (res == ERR_OK) {
      Serial.println("MultipleTargetFilter set on Output 1");
    } else {
      Serial.print("[WARN] iSYS_setMultipleTargetFilter failed: ");
      Serial.println(res);
    }
  }

  // Persist changes (sensor + application) to non-volatile memory
  {
    iSYSResult_t res = radar.saveAllSettings(DESTINATION_ADDRESS, TIMEOUT_MS);
    if (res == ERR_OK) {
      Serial.println("All settings saved");
    } else {
      Serial.print("[WARN] saveAllSettings failed: ");
      Serial.println(res);
    }
  }

  // Start acquisition so target lists can be retrieved
  {
    iSYSResult_t res = radar.iSYS_startAcquisition(DESTINATION_ADDRESS, TIMEOUT_MS);
    if (res == ERR_OK) {
      Serial.println("Acquisition started");
    } else {
      Serial.print("[WARN] iSYS_startAcquisition failed: ");
      Serial.println(res);
    }
  }
  
  Serial.println("=== Setup Complete - Starting Loop ===\n");
}

void loop() {
  static uint32_t loopCount = 0;
  loopCount++;
  
  Serial.printf("\n--- Loop #%u ---\n", loopCount);
  
  // Flush UART buffer
  while (Serial2.available()) { Serial2.read(); }

  // 16-bit list (compact)
  {
    iSYSResult_t res16 = radar.getTargetList16(&gTargetList, DESTINATION_ADDRESS, TIMEOUT_MS, ISYS_OUTPUT_1);
    if (res16 == ERR_OK) {
      printTargetList("[16-bit] Target List:");
    } else {
      Serial.print("[16-bit] getTargetList16 failed: ");
      Serial.println(res16);
    }
  }

  // 32-bit list (high precision)
  {
    iSYSResult_t res32 = radar.getTargetList32(&gTargetList, DESTINATION_ADDRESS, TIMEOUT_MS, ISYS_OUTPUT_1);
    if (res32 != ERR_OK) {
      Serial.printf("First 32-bit attempt failed (0x%02X), retrying...\n", res32);
      res32 = radar.getTargetList32(&gTargetList, DESTINATION_ADDRESS, TIMEOUT_MS, ISYS_OUTPUT_1);
    }
    if (res32 == ERR_OK) {
      printTargetList("[32-bit] Target List:");
    } else {
      Serial.print("[32-bit] getTargetList32 failed: ");
      Serial.println(res32);
    }
  }

  delay(1000); // 1 second between readings
}

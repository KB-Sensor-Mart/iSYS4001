/*
  iSYS4001 Radar Sensor (Set Range Min/Max)
  ----------------------------------------
  Set detection range limits in meters and save application settings.
  Wiring (ESP32): RX=16 ←→ Radar TX, TX=17 ←→ Radar RX, GND shared.
*/

#include "iSYS4001.h"

// Radar object and configuration
iSYS4001 radar(Serial2, 115200);
constexpr uint8_t DESTINATION_ADDRESS = 0x80;
constexpr uint32_t TIMEOUT_MS = 300; // ms
constexpr uint16_t MIN_RANGE_M = 3;   // meters
constexpr uint16_t MAX_RANGE_M = 10; // meters

void setup() {
  Serial.begin(115200);
  while (!Serial) { delay(10); }
  
  Serial.println("=== iSYS4001 Radar Sensor Setup ===");
  Serial.printf("Range: %d - %d meters\n", MIN_RANGE_M, MAX_RANGE_M);
  Serial.printf("Destination Address: 0x%02X\n", DESTINATION_ADDRESS);
  Serial.printf("Timeout: %d ms\n", TIMEOUT_MS);

  // Enable library debug output to USB Serial
  radar.setDebug(Serial, true);
  Serial.println("Debug output enabled");

  // Initialize Serial2 explicitly with pins on ESP32
  Serial2.begin(115200, SERIAL_8N1, 16, 17);
  Serial.println("Serial2 initialized (RX=16, TX=17)");

  // Flush stale bytes
  while (Serial2.available()) { Serial2.read(); }
  delay(500);
  Serial.println("Serial2 flushed");

  // Set minimum range
  Serial.printf("Setting minimum range to %d meters...\n", MIN_RANGE_M);
  iSYSResult_t r = radar.iSYS_setOutputRangeMin(ISYS_OUTPUT_1, MIN_RANGE_M, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Minimum range set successfully");
  } else {
    Serial.printf("setOutputRangeMin failed: 0x%02X\n", r);
  }

  // Set maximum range
  Serial.printf("Setting maximum range to %d meters...\n", MAX_RANGE_M);
  r = radar.iSYS_setOutputRangeMax(ISYS_OUTPUT_1, MAX_RANGE_M, DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Maximum range set successfully");
  } else {
    Serial.printf("setOutputRangeMax failed: 0x%02X\n", r);
  }

  // Save application settings
  Serial.println("Saving application settings...");
  r = radar.saveApplicationSettings(DESTINATION_ADDRESS, TIMEOUT_MS);
  if (r == ERR_OK) {
    Serial.println("Application settings saved");
  } else {
    Serial.printf("saveApplicationSettings failed: 0x%02X\n", r);
  }
  
  Serial.println("=== Setup Complete - Starting Loop ===\n");
}

void loop() {
  static uint32_t loopCount = 0;
  loopCount++;
  
  Serial.printf("\n--- Loop #%u ---\n", loopCount);
  
  // Flush UART buffer
  while (Serial2.available()) { Serial2.read(); }

  // Request target list
  Serial.println("Requesting target list...");
  iSYSTargetList_t list;
  iSYSResult_t res = radar.getTargetList32(&list, DESTINATION_ADDRESS, TIMEOUT_MS);
  
  // Retry once if failed
  if (res != ERR_OK) {
    Serial.printf("First attempt failed (0x%02X), retrying...\n", res);
    res = radar.getTargetList32(&list, DESTINATION_ADDRESS, TIMEOUT_MS);
  }
  
  if (res == ERR_OK) {
    if (list.error.iSYSTargetListError == TARGET_LIST_OK) {
      Serial.printf("Success! Found %u targets (Output %u)\n", list.nrOfTargets, list.outputNumber);
      
      if (list.nrOfTargets > 0) {
        Serial.println("Target Details:");
        for (uint16_t i = 0; i < list.nrOfTargets && i < MAX_TARGETS; i++) {
          Serial.printf("  Target %u: Signal=%.1f dB, Velocity=%.2f m/s, Range=%.2f m, Angle=%.1fDeg\n",
                       i + 1,
                       list.targets[i].signal,
                       list.targets[i].velocity,
                       list.targets[i].range,
                       list.targets[i].angle);
        }
      } else {
        Serial.println("  No targets detected");
      }
    } else {
      Serial.printf("Target list error: %u\n", list.error.iSYSTargetListError);
    }
  } else {
    Serial.printf("getTargetList failed: 0x%02X\n", res);
  }

  delay(1000); // 1 second between readings
}
